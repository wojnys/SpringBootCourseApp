{"ast":null,"code":"var _jsxFileName = \"/Users/dominikwojnar/Documents/Java/SpringBoot/CourseApp/client/src/components/Context/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { Container } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const useNotification = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notification, setNotification] = useState(null);\n  const showNotification = (message, type) => {\n    setNotification({\n      message,\n      type\n    });\n    // setNotification({ message, type });\n  };\n  const hideNotification = () => {\n    setNotification(null);\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      showNotification,\n      hideNotification\n    },\n    children: [children, notification && /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s2(NotificationProvider, \"9+u8OnBKu3AKeB7RYrRKq5+Xze8=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","Container","jsxDEV","_jsxDEV","NotificationContext","undefined","useNotification","_s","context","Error","NotificationProvider","children","_s2","notification","setNotification","showNotification","message","type","hideNotification","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dominikwojnar/Documents/Java/SpringBoot/CourseApp/client/src/components/Context/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport {Alert, Container, Typography} from \"@mui/material\";\n\ninterface Notification {\n    message: string[];\n    type: 'success' | 'error';\n}\n\ninterface NotificationContextType {\n    showNotification: (message: string, type: 'success' | 'error') => void;\n    hideNotification: () => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotification = (): NotificationContextType => {\n    const context = useContext(NotificationContext);\n    if (!context) {\n        throw new Error('useNotification must be used within a NotificationProvider');\n    }\n    return context;\n};\n\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n    const [notification, setNotification] = useState<Notification | null>(null);\n\n    const showNotification = (message: string[], type: 'success' | 'error') => {\n        setNotification({message, type})\n        // setNotification({ message, type });\n    };\n\n    const hideNotification = () => {\n        setNotification(null);\n    };\n\n    return (\n        <NotificationContext.Provider value={{ showNotification, hideNotification }}>\n    {children}\n    {notification && (\n        <Container>\n            {/*<Alert severity={`${notification.type}`}>*/}\n            {/*    <div>*/}\n            {/*        /!*    {*!/*/}\n            {/*        /!*    messages.map((message, index) => {*!/*/}\n            {/*        /!*        return (*!/*/}\n            {/*        /!*            <Typography align={\"left\"} key={index}>{message}</Typography>*!/*/}\n            {/*        /!*        )*!/*/}\n            {/*        /!*    })*!/*/}\n            {/*        /!*}*!/*/}\n            {/*        {notification.message}*/}\n            {/*    </div>*/}\n            {/*</Alert>*/}\n        </Container>\n    )}\n    </NotificationContext.Provider>\n);\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAC7E,SAAeC,SAAS,QAAmB,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAY3D,MAAMC,mBAAmB,gBAAGN,aAAa,CAAsCO,SAAS,CAAC;AAEzF,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAA+B;EAAAC,EAAA;EAC1D,MAAMC,OAAO,GAAGT,UAAU,CAACK,mBAAmB,CAAC;EAC/C,IAAI,CAACI,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,4DAA4D,CAAC;EACjF;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,EAAA,CANWD,eAAe;AAQ5B,OAAO,MAAMI,oBAAuD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACrF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAsB,IAAI,CAAC;EAE3E,MAAMe,gBAAgB,GAAGA,CAACC,OAAiB,EAAEC,IAAyB,KAAK;IACvEH,eAAe,CAAC;MAACE,OAAO;MAAEC;IAAI,CAAC,CAAC;IAChC;EACJ,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3BJ,eAAe,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,oBACIX,OAAA,CAACC,mBAAmB,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEL,gBAAgB;MAAEG;IAAiB,CAAE;IAAAP,QAAA,GAC/EA,QAAQ,EACRE,YAAY,iBACTV,OAAA,CAACF,SAAS;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAaC,CACd;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC6B,CAAC;AAEnC,CAAC;AAACZ,GAAA,CAjCWF,oBAAuD;AAAAe,EAAA,GAAvDf,oBAAuD;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}